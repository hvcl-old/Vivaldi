def mip(volume, x, y):
	step = 0.4                      
	#line_iter = perspective_iter(volume, x, y, step, 226)
	line_iter = orthogonal_iter(volume, x, y, step)
	D = line_iter.direction()
	T = 1100

	ambient = make_float3(0.05)
	lightpos1 = make_float3( -800, 500, 128)
	lightpos2 = make_float3( +800, -300, 128)
	
	for elem in line_iter:
		temp = cubic_query_3d(volume, elem)-T
		if temp > 0:
			P = elem
			Q = P
			P = P - step * D

			while length(P - Q) >  0.0001:
				M = (P + Q) / 2
				f = linear_query_3d(volume, M) - T
				if f < 0:
					P = M
				else:
					Q = M
			
			color1 = make_float3(225.0/255,204.0/255,153.0/255)
			color2 = make_float3(1,1,1)
			#compute lighting
			N = normalize(cubic_gradient_3d(volume,(P+Q)/2))
			N = -N
#			N = -(normalize(cubic_gradient_3d(volume,(P+Q)/2)))
			

			# accumulate
			#result1 = phong(L1, N, -D, color1, make_float3(1), 20, ambient)*255
			#result2 = phong(L2, N, -D, color2, make_float3(1), 20, ambient)*255
			result1 = phong(lightpos1, P, N, -D, color1,  make_float3(1), 20, ambient)*255
			result2 = phong(lightpos2, P, N, -D, color2,  make_float3(1), 20, ambient)*255

			return RGB(result1 + result2)

	return RGB(make_float3(0))
							  
def main():                                                                         
	volume = load_data_3d(DATA_PATH+'/CThead.dat')
	gpu_id = get_GPU_list(1)


	start  = time.time()
	result = mip(volume, x,y).execid(gpu_id).range(x=-256:256,y=-256:256).dtype(volume, short)
	synchronize()
	end = time.time()
	elapsed = end - start

	print "INTITIALIZE TIME", elapsed

	LoadMatrix("MODELVIEW")

	LoadIdentity()
	Translate(0, 0, 1300)
	Rotate(-90, 1,0,0)
	Rotate(180, 0, 0,1)
	Scaled(8,8,8)
	Translate(-128,-128,-128)

	start = time.time()
	loop = 1
	for i in range(loop):
		result = mip(volume, x,y).execid(gpu_id).range(x=-960:960,y=-540:540).dtype(volume, short)
	
	#	save_image(result)
		synchronize()



	end = time.time()
	elapsed = end - start
	print "ELASPED", elapsed, "loop", loop, "FPS", loop/elapsed
	


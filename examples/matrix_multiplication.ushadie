#def function(volume, image, x, y, z):
#	dtypes
#	point = make_uchar(0)
#	point2 = make_uchar2(0,255)
#	point3 = make_uchar3(0)
#	point4 = make_uchar4(0)
#
#	point = make_short(0)
#	point2 = make_short2(-32768,32768)
#	point3 = make_short3(0)
#	point4 = make_short4(0)
#
#	point = make_int(0)
#	point2 = make_int2(-2147483648, 2147483647)
#	point3 = make_int3(0)
#	point4 = make_int4(0)
#
#	point = 0
#	point = make_float2(0)
#	point = make_float3(0)
#	point = make_float4(0)
#
#
#	no interpolation
#	val = point_query_2d(image, x, y)
#	val = point_query_2d(image, point2)
#	val = point_query_3d(volume, x, y, z)
#	val = point_query_3d(volume, point3)
#
#
#	linear_query
#	val = linaer_query_2d(image, x, y)
#	val = linear_query_2d(image, point2)
#	val = linear_query_3d(volume, x, y, z)
#	val = linear_query_3d(volume, point3)
#
#	cubic_query
#	val = cubic_query_2d(image, x, y)
#	val = cubic_query_2d(image, point2)
#	val = cubic_query_3d(volume, x, y, z)
#	val = cubic_query_3d(volume, point3)
#
#	linear gradient
#	val = linear_query_2d(image, x, y)
#	val = linear_query_2d(image, point2)
#	val = linear_query_3d(volume, x, y, z)
#	val = linear_query_3d(volume, point3)
#
#
#	iterators
#	iter = make_line_iter(float3 start, float3 end, step_size)
#	iter = maek_plane_iter(float2 point2, radius)
#	iter = make_cube_iter(float3 point3, radius)
#	iter = orthogonal_iter(volume, poin2, step)
#	iter = perspective_iter(volume, point2, step)
#
#	for statement
#	for point3 in iter:
#		val = point_query_3d(volume, point3)
#		
#
#	domain specific function
#	phong(float3 L, float3 N, float3 omega, float3 kd, float3 ks, float n, float3 amb)
#	diffuse(float3 L, float3 N, float3 kd)
#	laplacian(image, float2 point2)
#
#
#
#	return val

def function10(a, b, x, y, n):
	sum = 0
	for i in range(n):
		sum += point_query_2d(a, i, x) + point_query_2d(b, i, y)
	return sum



def function1(a, x, y, n):
	sum = point_query_2d(a, x, y)
	return sum

def function2(a, x, y, n):
	sum = point_query_2d(a, 0, y)
	return sum

def function3(a, x, y, n):
	sum = 0
	for i in range(n):
		sum += point_query_2d(a, i, y)
	return sum

def function4(a, x, y, n):
	sum = point_query_2d(a, x, y)
	return sum + n

def function5(a, b, x, y, n):
	sum = point_query_2d(a, x, y)
	sum += point_query_2d(b, x, y)
	return sum + n

def function6(a, b, x, y, n):
	sum = 0
	for i in range(n):
		sum += point_query_2d(a,i,y) * point_query_2d(b, i, x)

	return sum

def function7(a, b, x, y, n):
	sum = 0
	for i in range(n):
		sum += point_query_2d(a, i, y) * point_query_2d(b ,x, i)
	return sum

def function12(a, b, x, y, n):
	sum = 0
	for i in range(n):
		sum += point_query_2d(a, i, y) * point_query_2d(b ,x, i)
	return sum



import numpy as np
def main():
	a = np.array(range(25), dtype=np.float32).reshape(5,5)
	b = np.array(range(25), dtype=np.float32).reshape(5,5)

	# TEST 1
#	c = function1(a,x, y, 5).modifier(c, size=(5,5), dtype=float, split=(5,1))
#								.modifier(a, size=(5,5), dtype=float, split=(5,1))
#	c = SHADIE_GATHER(c)
#	print c

	# TEST 2
#	c = function2(a,x, y, 5).modifier(c, size=(5,5), dtype=float, split=(5,1))
#								.modifier(a, size=(5,5), dtype=float, split=(5,1))
#	c = SHADIE_GATHER(c)
#	print c
	
	# TEST 3
#	c = function3(a,x, y, 5).modifier(c, size=(5,5), dtype=float, split=(5,1))
#								.modifier(a, size=(5,5), dtype=float, split=(5,1))
#	c = SHADIE_GATHER(c)
#	print c

	# TEST 4
#	c = function4(a, x, y, 5).modifier(c, size=(5,5), dtype=float, split=(5,5))
#							 .modifier(a, size=(5,5), dtype=float, split=(5,5))
#	c = SHADIE_GATHER(c)
#	print c

	# TEST 5
#	c = function5(a, b, x, y, 5).modifier(c, size=(5,5), dtype=float, split=(5,5))
#								.modifier(a, size=(5,5), dtype=float, split=(5,5))
#								.modifier(b, size=(5,5), dtype=float)
#	c = SHADIE_GATHER(c)
#	print c

	# TEST 6
#	c = function6(a, b, x, y, 5).modifier(c, size=(5,5), dtype=float, split=(5,5))
#								.modifier(a, size=(5,5), dtype=float, split=(5,1))
#								.modifier(b, size=(5,5), dtype=float, split=(5,1))
#	c = SHADIE_GATHER(c)
#	print c

	# TEST 7
#	c = function7(a, b, x, y, 5).modifier(c, size=(5,5), dtype=float, split=(5,5))
#								.modifier(a, size=(5,5), dtype=float, split=(5,1))
#								.modifier(b, size=(5,5), dtype=float, split=(1,5))
#	c = SHADIE_GATHER(c)
#	print c

	# TEST 8
	c = function7(a, b, x, y, 5).modifier(c, size=(5,5), dtype=float, split=(2,2))
								.modifier(a, size=(5,5), dtype=float, split=(2,1))
								.modifier(b, size=(5,5), dtype=float, split=(1,2))
	c = SHADIE_GATHER(c)
	print c


#	del a
#	del b
	# TEST 9
	#
#	a = numpy.array(range(16384),dtype=numpy.float32).reshape(128,128)
#	b = numpy.array(range(16384),dtype=numpy.float32).reshape(128,128)
#	c = function7(a, b, x, y, 128).modifier(c, size=(128,128), dtype=float, split=(2,2))
#								.modifier(a, size=(128,128), dtype=float, split=(2,1))
#								.modifier(b, size=(128,128), dtype=float, split=(1,2))
#	c = SHADIE_GATHER(c)
#	print c

	# TEST 10
	# diffrent row and colom size
#	a = numpy.array(range(180),dtype=numpy.float32).reshape(18,10)
#	b = numpy.array(range(180),dtype=numpy.float32).reshape(10,18)
#	c = function7(a, b, x, y, 10).modifier(c, size=(18,18), dtype=float, split=(2,2))
#								.modifier(a, size=(18,10), dtype=float, split=(2,1))
#								.modifier(b, size=(10,18), dtype=float, split=(1,2))
#	c = SHADIE_GATHER(c)
#	print c

	# TEST 11
	# output split
#	a = numpy.array(range(180),dtype=numpy.float32).reshape(18,10)
#	b = numpy.array(range(180),dtype=numpy.float32).reshape(10,18)
#	c = function7(a, b, x, y, 10).modifier(c, size=(18,18), dtype=float, split=(4,4))
#								.modifier(a, size=(18,10), dtype=float, split=(1,1))
#								.modifier(b, size=(10,18), dtype=float, split=(1,1))
#	c = SHADIE_GATHER(c)
#	print c

	# TEST 12
	# not split
#	a = numpy.array(range(180),dtype=numpy.float32).reshape(18,10)
#	b = numpy.array(range(180),dtype=numpy.float32).reshape(10,18)
#	c = function12(a, b, x, y, 10).modifier(c, size=(18,18), dtype=float)
#								.modifier(a, size=(18,10), dtype=float)
#								.modifier(b, size=(10,18), dtype=float)
#	c = SHADIE_GATHER(c)
#	print c


	# TEST 13
	# 3GB memory free test
#	a = numpy.array(range(512*512),dtype=numpy.float32).reshape(512,512)
#	b = numpy.array(range(512*512),dtype=numpy.float32).reshape(512,512)
#	c = function12(a, b, x, y,512).modifier(c, size=(512,512), dtype=float)
#								.modifier(a, size=(512,512), dtype=float)
#								.modifier(b, size=(512,512), dtype=float)
#	c = SHADIE_GATHER(c)
#	print c

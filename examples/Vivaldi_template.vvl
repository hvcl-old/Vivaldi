#def function(volume, image, x, y, z):
#	dtypes
#	point = make_uchar(0)
#	point2 = make_uchar2(0,255)
#	point3 = make_uchar3(0)
#	point4 = make_uchar4(0)
#
#	point = make_short(0)
#	point2 = make_short2(-32768,32768)
#	point3 = make_short3(0)
#	point4 = make_short4(0)
#
#	point = make_int(0)
#	point2 = make_int2(-2147483648, 2147483647)
#	point3 = make_int3(0)
#	point4 = make_int4(0)
#
#	point = 0
#	point = make_float2(0)
#	point = make_float3(0)
#	point = make_float4(0)
#
#
#	no interpolation
#	val = point_query_2d(image, x, y)
#	val = point_query_2d(image, point2)
#	val = point_query_3d(volume, x, y, z)
#	val = point_query_3d(volume, point3)
#
#
#	linear_query
#	val = linaer_query_2d(image, x, y)
#	val = linear_query_2d(image, point2)
#	val = linear_query_3d(volume, x, y, z)
#	val = linear_query_3d(volume, point3)
#
#	cubic_query
#	val = cubic_query_2d(image, x, y)
#	val = cubic_query_2d(image, point2)
#	val = cubic_query_3d(volume, x, y, z)
#	val = cubic_query_3d(volume, point3)
#
#	linear gradient
#	val = linear_query_2d(image, x, y)
#	val = linear_query_2d(image, point2)
#	val = linear_query_3d(volume, x, y, z)
#	val = linear_query_3d(volume, point3)
#
#
#	iterators
#	iter = make_line_iter(float3 start, float3 end, step_size)
#	iter = maek_plane_iter(float2 point2, radius)
#	iter = make_cube_iter(float3 point3, radius)
#	iter = orthogonal_iter(volume, poin2, step)
#	iter = perspective_iter(volume, point2, step)
#
#	for statement
#	for point3 in iter:
#		val = point_query_3d(volume, point3)
#		
#
#	domain specific function
#	phong(float3 L, float3 N, float3 omega, float3 kd, float3 ks, float n, float3 amb)
#	diffuse(float3 L, float3 N, float3 kd)
#	laplacian(image, float2 point2)
#
#
#
#	return val

#def main():
#	this part is just python
#	print "Loading data..."

#	image = load_data_2d(file_path,dtype_you_want, ouf_of_core_read)
#	volume = load_data_3d(file_path,dtype_you_want, ouf_of_core_read)
#	ex)


#	result = function(volume, image, x, y, z).modifier(volume, size=, halo=, dtype=, split=)
#												.modifier(image, size=, halo=, dtype=, split=)
#												.modifier(result, size=, halo=, dtype, split=)

#	save_image(result, 'file_name_here', 'out_of_core save')

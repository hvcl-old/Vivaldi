import numpy                    # Numerical computing library 
# -----------------------------------------------------------------------------------
# Initialize the data, 
# do nothing but preallocate everything under the hood
def init(image, x, y):
    return point_query_2d(image, x, y)
# -----------------------------------------------------------------------------------
def bilateral(image, x, y):
    center      = make_float2(x,y) 
	centerVal   = point_query_2d(image, center)
	# Specify the radius here
	radius = 5            
	plane_iter = make_plane_iter(x, y, radius)
    
    id              = 40
    intensityWeight = 1
    
    cd              = 100  
    colorWeight     = 1  
    weight          = 0
    totalWeight     = 0

    count           = 0
    
	pointVal = make_float3(0)
	out = make_float3(0)
	
    for point in plane_iter:
        pointVal = point_query_2d(image, point)                                      
        intensityWeight	= expf(-0.5* ((x-point.x)*(x-point.x) + (y-point.y)*(y-point.y)) / (id*id))
        colorWeight     = expf(-0.5* ((centerVal.x-pointVal.x)*(centerVal.x-pointVal.x) + (centerVal.y-pointVal.y)*(centerVal.y-pointVal.y) +(centerVal.z-pointVal.z)*(centerVal.z-pointVal.z) ) / (cd*cd))
        weight = intensityWeight * colorWeight
        out.x    = out.x + weight*pointVal.x
        out.y    = out.y + weight*pointVal.y
        out.z    = out.z + weight*pointVal.z
        totalWeight = totalWeight + weight
        count = count + 1
    
	out.x = out.x/totalWeight
	out.y = out.y/totalWeight
	out.z = out.z/totalWeight
    
    return out
# --------------------------------------------------------------------------------	
def main():
    # --------------------------------------------------------------------------------
    # # Create volume array
    # dimx   = 512
    # dimy   = 512
    # dimz   = 1024
    # volume = numpy.random.rand(dimx, dimy, dimz).astype(numpy.float32)
    
    # print "Dimension    : ", dimx, dimy, dimz 
    # print "Volume shape : ", volume.shape
    # volume = load_data_3d('/home/shared/data/kiwi.dat', 'uchar')
	image = load_data_2d('/home/shared/data/anemone.png')
    # --------------------------------------------------------------------------------
    # Number of GPUs for experiment
    #!!!
    gpu_list = get_GPU_list(1)     
    
    # Initialize the data allocation
    #!!!
    image = init(image,x,y).halo(image,5).range(image,halo=5).dtype(image,uchar).execid(gpu_list).split(image, z=1)
    synchronize()
    
     # Time measure the bilateral kernel
    start = time.time()
    
	image = bilateral(image,x,y).halo(image,5).range(image,halo=0).dtype(image,float).execid(gpu_list).split(image, z=1)              
    # synchronize()
    
	stop  = time.time()
    
    elapsed = stop - start
    print "Execution time (s): ", elapsed
	
	save_image(image,'bilateral.png') 
# ----------------------------------------------------------------------------------- 
if __name__ == '__main__':  
    main() 

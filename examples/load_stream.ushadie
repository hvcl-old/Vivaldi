###########################################################################################
def minimum(volume, x, y, z):
	# Specify the radius here
	radius = 2            
	cube_iter = make_cube_iter(x, y, z, radius)
	
	center = make_float3(x,y,z) 
	min = point_query_3d(volume, center)
	for point in cube_iter:
		pointVal = point_query_3d(volume, point)
		if min > pointVal:
			min = pointVal 
		
	return min
###########################################################################################
def conditional_minimum(volume, x, y, z, thresh):
	# Specify the radius here
	radius = 2            
	cube_iter = make_cube_iter(x, y, z, radius)
	center = make_float3(x,y,z) 
	min = point_query_3d(volume, center)
	for point in cube_iter:
		pointVal = point_query_3d(volume, point)
		if min > pointVal:
			min = pointVal
    
    condition = False
    threshold = 30 # Cang lon cang ro~
        
    centerVal = point_query_3d(volume, center)
    
    if centerVal < threshold:
        condition = True
        
	if condition:	
        return min
    else:
        return centerVal/2
###########################################################################################
def maximum(volume, x, y, z):
	# Specify the radius here
	radius = 3            

	cube_iter = make_cube_iter(x, y, z, radius)
	
	center = make_float3(x,y,z) 
	max= point_query_3d(volume, center)
	for point in cube_iter:
		pointVal = point_query_3d(volume, point)
		if max < pointVal:
			max = pointVal
		
	return max

###########################################################################################
def conditional_maximum(volume, x, y, z):
	# Specify the radius here
	radius = 2            

	cube_iter = make_cube_iter(x, y, z, radius)
	
	center = make_float3(x,y,z) 
	max= point_query_3d(volume, center)
	for point in cube_iter:
		pointVal = point_query_3d(volume, point)
		if max < pointVal:
			max = pointVal
            
	 
    condition = False
    threshold = 10 # Cang lon cang ro~
        
    centerVal = point_query_3d(volume, center)
    
    if centerVal > threshold:
        condition = True
        
	if condition:	
        return max
    else:
        return centerVal
###########################################################################################
def median(volume, x, y, z):
    # Viola's method
	minval = 0
    maxval = 255
    pivot  = (minval + maxval)/2.0
	
	count 	= 0
	val 	= 0
	for trial in range(0, 8):
		radius = 3       
		cube_iter = make_cube_iter(x, y, z, radius)
		count 	= 0
		for point in cube_iter:
			val = point_query_3d(volume, point)
			if val > pivot:
				count = count + 1
	
		if count < (2*radius+1)*(2*radius+1)*(2*radius+1)/2:
			maxval = floorf(pivot);      
        else:
            minval = floorf(pivot)+1;
		
		pivot = (minval + maxval)/2.0;
	
	return floorf(pivot)
    
###########################################################################################
def standard_deviation(volume, x, y, z):
	# Specify the radius here
	radius = 3            
	cube_iter = make_cube_iter(x, y, z, radius)

	# Calculate the average
	sum = 0
	total = 0
	for point in cube_iter:
		sum = sum + point_query_3d(volume, point)
		total += 1

	mean = sum/(total)

	# Calculate the population
	cube_iter = make_cube_iter(x,y,z, radius)
	tmp   = 0
	stdev = 0
	for point in cube_iter:
		tmp = point_query_3d(volume, point) - mean
		stdev += sqrt(tmp*tmp)

	# Calculate the standard deviation
	stdev /= mean
	stdev = sqrt(stdev)
	
	return stdev


###########################################################################################
def to_float(volume, x, y, z):
	center = make_float3(x,y,z) 
	val = point_query_3d(volume, center)
	return val
###########################################################################################
def bilateral(volume, x, y, z):
    center      = make_float3(x,y,z) 
	centerVal   = point_query_3d(volume, center)
	# Specify the radius here
	radius = 5            
	cube_iter = make_cube_iter(x, y, z, radius)
    
    id              = 40
    intensityWeight = 1
    
    cd              = 100  
    colorWeight     = 1  
    weight          = 0
    totalWeight     = 0

    count           = 0
    pointVal        = 0
    
    out = 0;
    for point in cube_iter:
        pointVal = point_query_3d(volume, point)                                      
        intensityWeight	= expf(-0.5* ((x-point.x)*(x-point.x) + (y-point.y)*(y-point.y) + (z-point.z)*(z-point.z) ) / (id*id))
        colorWeight     = expf(-0.5* ((centerVal-pointVal)*(centerVal-pointVal) ) / (cd*cd))
        weight = intensityWeight * colorWeight
        out    = out + weight*centerVal
        totalWeight = totalWeight + weight
        count = count + 1
    out = out/totalWeight
    
    return out
###########################################################################################
def surface_detection(volume, x, y, z):
	dif = linear_gradient_3d(volume, x, y, z)
    
    # dif = length(dif)
    # # if dif > 1:
        # # dif = 1
    return length(dif)
    # if length(dif) > .2: 
        # return 0
	# return 1
###########################################################################################
def threshold(volume, x, y, z):
     
	center      = make_float3(x,y,z) 
	centerVal   = point_query_3d(volume, center)
	    
    ## Calculate mean
    radius    = 5
    pointVal  = 0
    cube_iter = make_cube_iter(x, y, z, radius)
    sum       = 0
    total     = 0
    for point in cube_iter:
        pointVal = point_query_3d(volume, point)
        sum   = sum   + pointVal
		total = total + 1
    mean = sum/total
    
    thresh = 1.5
    if mean < thresh:
        return 1
    else:
        return 0
    # return thresh
    # ## Calculate stdevev
    # # Calculate the population
	# cube_iter = make_cube_iter(x,y,z, radius)
	# tmp   = 0
	# stdev = 0
	# for point in cube_iter:
		# tmp = point_query_3d(volume, point) - mean
		# stdev += sqrt(tmp*tmp)

	# # Calculate the standard deviation
	# stdev /= mean
	# stdev = sqrt(stdev)
    
    # ####################
    # k = 0
    # r = 0.5
    # p = 2
    # q = 10
    
    # # Phansalkar's method http://fiji.sc/wiki/index.php/Auto_Local_Threshold
    # # t = mean * (1 + p * exp(-q * mean) + k * ((stdevev / r) - 1)) 
    # thresh = 0
    # thresh = mean * (1 + p * expf(-q * mean) + k * ((stdev / r) - 1))
    
    # # if centerVal < thresh:
        # # return 1
    # # else:
        # # return 0
    # return thresh
###########################################################################################

import numpy
def main():           
	#volume1 = load_data_3d('/home/shared/data/em_medium.dat', 'uchar', out_of_core=True)

#	S = load_stream(DATA_PATH+'mydata.str', uchar)
	S = load_stream(DATA_PATH+'mydata.dat', uchar, size=64, halo=2)

	i = 0
	for a in S:
		#save_data(a, 'out%d.raw'%(i))
#		volume3 = median(volume1,x,y,z).modifier(volume1, size=elem, dtype=uchar)
#										.modifier(volume3, size=elem, dtype=float, invalid=3)
#
		print a
		
#		volume4 = standard_deviation(volume3,x,y,z).modifier(volume3, size=elem, halo=10, dtype=float)
#													.modifier(volume4, size=elem, halo=7, dtype=float)

#		volume5 = bilateral(volume4,x,y,z).modifier(volume4, size=elem, halo=7, dtype=float)
#										.modifier(volume5, size=elem, halo=2, dtype=float)

#		volume6 = minimum(volume5,x,y,z).modifier(volume5, size=elem, halo=2, dtype=float)
#									 .modifier(volume6, size=elem, halo=0, dtype=float)

		i += 1	
#		save_image(volume6,'result.raw',out_of_core=True)
#		synchronize()


		#synchronize()
	# volume7 = maximum(volume6,x,y,z).modifier(volume6, size=elem, halo=3, dtype=float, split=(6,1,1))
									 # .modifier(volume7, size=elem, halo=0, dtype=float, split=(6,1,1))


	# volume8 = bilateral(volume7,x,y,z).modifier(volume7, size=elem, halo=5, dtype=float, split=(6,1,1))
									  # .modifier(volume8, size=elem, halo=0, dtype=float, split=(6,1,1))

	# volume9 = threshold(volume8,x,y,z).modifier(volume8, size=elem, halo=2, dtype=float, split=(6,1,1))
									  # .modifier(volume9, size=elem, halo=0, dtype=float, split=(6,1,1))

	# volume10 = maximum(volume9,x,y,z).modifier(volume9, size=elem, halo=3, dtype=float, split=(6,1,1))
									 # .modifier(volume10, size=elem, halo=0, dtype=float, split=(6,1,1))


	# save_image(volume10,'result.raw',out_of_core=True) 

	# ## TODO: Debug here
    # # 3D Median filter
    # volume = median(volume,x,y,z).range(volume).dtype(volume, float)

    # # 3D Standard Deviation
    # volume = standard_deviation(volume,x,y,z).range(volume).dtype(volume, float)
	# volume = minimum(volume,x,y,z).range(volume).dtype(volume, float)
    
	# volume = bilateral(volume,x,y,z).range(volume).dtype(volume, float)
    # # volume = bilateral(volume,x,y,z).range(volume).dtype(volume, float)
    # # volume = bilateral(volume,x,y,z).range(volume).dtype(volume, float)
    # # volume = median(volume,x,y,z).range(volume).dtype(volume, float)
    # # volume = threshold(volume,x,y,z).range(volume).dtype(volume, float)
    # # volume = maximum(volume,x,y,z).range(volume).dtype(volume, float)
    # # volume = minimum(volume,x,y,z).range(volume).dtype(volume, float)
   
    # # volume = maximum(volume,x,y,z).range(volume).dtype(volume, float)
    # # volume = maximum(volume,x,y,z).range(volume).dtype(volume, float)
    # # volume = bilateral(volume,x,y,z).range(volume).dtype(volume, float)
    
    # # volume = threshold(volume,x,y,z).range(volume).dtype(volume, float)
    # # print volume[2:8,2:8:,2:8]
	
    # # volume = conditional_minimum(volume,x,y,z).range(volume).dtype(volume, float)
    # # volume = conditional_maximum(volume,x,y,z).range(volume).dtype(volume, float)
    # # volume = conditional_maximum(volume,x,y,z).range(volume).dtype(volume, float)
    # # volume = conditional_maximum(volume,x,y,z).range(volume).dtype(volume, float)
    
    # # for trial in range(0, 10)
    # # volume = maximum(volume,x,y,z).range(volume).dtype(volume, float)
    # # volume = minimum(volume,x,y,z).range(volume).dtype(volume, float)

    
    # # volume = bilateral(volume,x,y,z).range(volume).dtype(volume, float)
    # # volume = surface_detection(volume,x,y,z).range(volume).dtype(volume, float)
    
    
    # # volume = minimum(volume,x,y,z).range(volume).dtype(volume, float)
    # # volume = minimum(volume,x,y,z).range(volume).dtype(volume, float)
    # # volume = maximum(volume,x,y,z).range(volume).dtype(volume, float)
    # # volume = maximum(volume,x,y,z).range(volume).dtype(volume, float)
    
    
	# Save as float
	# save_image(volume,'result.raw', out_of_core=True) 
    
###########################################################################################
if __name__ == '__main__':     # if the function is the main function ...
    main() # ...call it

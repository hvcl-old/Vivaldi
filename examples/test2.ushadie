import numpy

def edge_detection(image, x, y):
	dif = linear_gradient_2d(image, x, y)
	return length(dif)

def mip(volume, x, y):
	step = 0.4
	line_iter = orthogonal_iter(volume, x, y, step)

	max = 0
	for elem in line_iter:
		val = linear_query_3d(volume, elem)
		if max < val:
			max = val
	return max


def maximum(A,B,x,y):
	a = query_2d(A,x,y)
	b = query_2d(B,x,y)
	max = 0
	if a < b: max = b
	else: max = a
	return max

def main():

#	image = load_data_2d(DATA_PATH+'/flower.jpg')
#	image = edge_detection(image,x,y).split(image,x=4,y=4).dtype(image,uchar).halo(image,1)

#	synchronize()	




	volume = load_data_3d(DATA_PATH+'/CThead.dat')


	image = load_data_2d(DATA_PATH+'/hk_pano_retouched_2G.png')
	#image = load_data_2d(DATA_PATH+'/flower.jpg')
	result = edge_detection(image,x,y).dtype(image,uchar)
	synchronize()
	print "DATA TRASFER TO GPU"



	image = edge_detection(image,x,y).split(image,x=4,y=4).dtype(image,uchar).halo(image,1)
	synchronize()











#	image = load_data_2d(DATA_PATH+'/hk_pano_retouched_2G.png')
	#image = load_data_2d(DATA_PATH+'/flower.jpg')
#	result = edge_detection(image,x,y).dtype(image,uchar)
#	synchronize()
#	print "DATA TRASFER TO GPU"



#	image = edge_detection(image,x,y).split(image,x=4,y=4).dtype(image,uchar).halo(image,1)
#	synchronize()













#	image = load_data_2d(DATA_PATH+'/flower.jpg')
#	image = load_data_2d(DATA_PATH+'/hk_pano_retouched_2G.png')
#	image = load_data_2d(DATA_PATH+'/Kwanghwamun.JPG')
#	image = edge_detection(image,x,y).split(image,x=2,y=2).dtype(image,uchar).halo(image,1)
#	result = edge_detection(image,x,y).dtype(image,uchar)

#	synchronize()
#	save_image(image, 'flower.png')
#	save_image(result, 'flower.png')


#	image = edge_detection(image,x,y).split(image,x=2,y=2).dtype(image,uchar).halo(image,1)

#	synchronize()	



#	volume = load_data_3d(DATA_PATH+'/CThead.dat')
#	Rotate(90, 0, 0, 1)
#	Translate(-128, -128, 0)
#	result = mip(volume,x,y).range(x=-256:256,y=-256:256).dtype(volume, short).split(result,x=4,y=4)
#	save_image(result,'orthogonal_1.png')

#	volume = load_data_3d(DATA_PATH+'/head.dat')
#	Rotate(90, 0, 0, 1)
#   Translate(-360, -360, 1000)
#    result = mip(volume,x,y).range(x=-500:500,y=-500:500).dtype(volume, short).split(result,x=4,y=4)
#    save_image(result,'orthogonal_1.png')

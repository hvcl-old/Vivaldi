# It was written by Choi Heung-seok, woslakfh1@gmail.com
#
# This example shows 4 method to edge detection.
# First, ordinary method using a GPU
# Second, ordinary method but only part of image
# Third, parallel method using screen decomposition and prepared compositing function
# Last, parallel method  using data decomposition and custom compositing function

# you can test using 'shadie edge_detection_flower.ushadie'
# 'flower.jpg' is uesd and the size is 240 width and 210 height.
# result images are saved at $vivaldi_path/py-src/result
#
#---------------------------------------------------------------------------------------------------

# user can import python modules because our language based on python
import numpy

# user defined image filter function
# this functions will be applied per pixel
def edge_detection(image, x, y, z):
	dif = point_query_3d(image, x, y, z)
	
	return make_uchar(dif)

# VIVALDI always start from main
# end after every tasks created done
def main():
	# load 2d rgb type data 'flower.jpg' at specified path
	# and save loaded image as user defined type like numpy.float32
	# DATA_PATH is shadie environment variable. 
	# it is defined to $vivaldi_path/data
	image = load_data_3d(DATA_PATH+'dummy.dat', out_of_core=True)

	# use GPU list which user specified to execute user defined function 'edge_detection' using execid modifier
	# and below range,(x=0:240,y=0:210), will be used to projection range
#	image = edge_detection(image, x, y).range(image).dtype(image, uchar).split(image,y=10).halo(image,1)
#	image = edge_detection(image, x, y).range(x=0:240,y=0:480).dtype(image, uchar).split(image,y=10).halo(image,1)
	image = edge_detection(image, x, y).range(image).dtype(image, uchar).split(image,z=20)

	save_image(image,'result.raw', out_of_core=True)

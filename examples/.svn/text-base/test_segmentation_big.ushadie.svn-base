############################################################################################
def minimum(volume, x, y, z):
	radius = 3
	cube_iter = make_cube_iter(x, y, z, radius)

	center = make_float3(x,y,z)
	min = point_query_3d(volume, center)
	for point in cube_iter:
		pointVal = point_query_3d(volume, point)
		if length((center - point)) < radius:
			if min > pointVal:
				min = pointVal

	return min
###########################################################################################
def conditional_minimum(volume, x, y, z, thresh):
	radius = 2
	cube_iter = make_cube_iter(x, y, z, radius)
	center = make_float3(x,y,z)
	min = point_query_3d(volume, center)
	for point in cube_iter:
		pointVal = point_query_3d(volume, point)
		if min > pointVal:
			min = pointVal

	condition = False
	threshold = 30

	centerVal = point_query_3d(volume, center)

	if centerVal < threshold:
		condition = True

	if condition:
		return min
	else:
		return centerVal/2

###########################################################################################
def maximum(volume, x, y, z):
	radius = 3

	cube_iter = make_cube_iter(x, y, z, radius)

	center = make_float3(x,y,z)
	max= point_query_3d(volume, center)
	for point in cube_iter:
		pointVal = point_query_3d(volume, point)
		if length((center - point)) < radius:
			if max < pointVal:
				max = pointVal

	return max

##########################################################################################
def conditional_maximum(volume, x, y, z):
	radius = 2

	cube_iter = make_cube_iter(x, y, z, radius)

	center = make_float3(x,y,z)
	max= point_query_3d(volume, center)
	for point in cube_iter:
		pointVal = point_query_3d(volume, point)
		if max < pointVal:
			max = pointVal


	condition = False
	threshold = 10 
	centerVal = point_query_3d(volume, center)

	if centerVal > threshold:
		condition = True

	if condition:
		return max
	else:
		return centerVal


###########################################################################################
def median(volume, x, y, z):
	# Viola's method
	minval = 0
    maxval = 255
	pivot  = (minval + maxval)/2.0
	
	count 	= 0
	val 	= 0
	for trial in range(0, 8):
		radius = 2       
		cube_iter = make_cube_iter(x, y, z, radius)
		count 	= 0
		for point in cube_iter:
			val = point_query_3d(volume, point)
			if val > pivot:
				count = count + 1
	
		if count < (2*radius+1)*(2*radius+1)*(2*radius+1)/2:
			maxval = floorf(pivot); 
		else:
			minval = floorf(pivot)+1;
		
		pivot = (minval + maxval)/2.0;
	
	return floorf(pivot)
    
###########################################################################################
def standard_deviation(volume, x, y, z):
	# Specify the radius here
	radius = 3
	center = make_float3(x,y,z)      
	cube_iter = make_cube_iter(x, y, z, radius)

	# Calculate the average
	sum = 0
	total = 0
	point = make_float3(0)
	for point in cube_iter:
		if length((center - point)) < radius:
            sum = sum + point_query_3d(volume, point)
			total += 1

	mean = sum/(total)

	# Calculate the population
	cube_iter = make_cube_iter(x,y,z, radius)
	tmp   = 0
	stdev = 0
	point = make_float3(0)
	for point in cube_iter:
		if length((center - point)) < radius:
			tmp = point_query_3d(volume, point) - mean
			stdev += sqrt(tmp*tmp)

    # Calculate the standard deviation
	stdev /= mean
	stdev = sqrt(stdev)
	return stdev

###########################################################################################
def scale(volume, value):
    max = volume.max()
	min = volume.min()
	volume = (volume-min)/(max-min)*value
 
###########################################################################################
def to_float(volume, x, y, z):
	center = make_float3(x,y,z) 
	val = point_query_3d(volume, center)
	
	return val
###########################################################################################

def bilateral(volume, x, y, z):
	center      = make_float3(x,y,z)
	centerVal   = point_query_3d(volume, center)

	radius = 5
	cube_iter = make_cube_iter(x, y, z, radius)

	id              = 40
	intensityWeight = 1

	cd              = 100
	colorWeight     = 1
	weight          = 0
	totalWeight     = 0

	count           = 0
	pointVal        = 0

	out = 0;
	for point in cube_iter:
		pointVal = point_query_3d(volume, point)
		intensityWeight = expf(-0.5* ((x-point.x)*(x-point.x) + (y-point.y)*(y-point.y) + (z-point.z)*(z-point.z) ) / (id*id))
		colorWeight     = expf(-0.5* ((centerVal-pointVal)*(centerVal-pointVal) ) / (cd*cd))
		weight = intensityWeight * colorWeight
		out    = out + weight*centerVal
		totalWeight = totalWeight + weight
		count = count + 1
	out = out/totalWeight

	return out
###########################################################################################


###########################################################################################
def threshold(volume, x, y, z):

	center      = make_float3(x,y,z)
	centerVal   = point_query_3d(volume, center)

	radius    = 5
	pointVal  = 0
	cube_iter = make_cube_iter(x, y, z, radius)
	sum       = 0
	total     = 0

	for point in cube_iter:
		if length((center - point)) < radius:
			pointVal = point_query_3d(volume, point)
			sum   = sum   + pointVal
			total = total + 1
	mean = sum/total

	thresh = 1.5
	if mean < thresh:
		return 1
	else:
		return 0


import numpy


def main():                                                                         
	print "Loading data..."
	#volume1 = load_data_3d('/home/shared/data/em_big.dat', 'uchar', out_of_core=True)
    
	work_range = {'x':(0,512), 'y':(0,512),'z':(0,512)}
	

	volume1 = load_data_3d('/home/shared/data/em_small.dat', 'uchar', out_of_core=True)

	elem = {'x':(0,512), 'y':(0,512),'z':(0,200)}

	volume2 = to_float(volume1,x,y,z).modifier(volume1, size=elem, halo=2, dtype=uchar, split=(2,1,1))
									 .modifier(volume2, size=elem, halo=2, dtype=float, split=(2,1,1))


	volume3 = median(volume2,x,y,z).modifier(volume2, size=elem, halo=2, dtype=float, split=(1,6,1))
								   .modifier(volume3, size=elem, halo=0, dtype=float, split=(1,6,1))

	volume4 = standard_deviation(volume3,x,y,z).modifier(volume3, size=elem, halo=3, dtype=float, split=(2,1,3))
												.modifier(volume4, size=elem, halo=0, dtype=float, split=(2,1,3))


#	volume5 = bilateral(volume4,x,y,z).modifier(volume4, size=elem, halo=5, dtype=float, split=(6,1,1))
#										.modifier(volume5, size=elem, halo=0, dtype=float, split=(6,1,1))

#	volume6 = minimum(volume5,x,y,z).modifier(volume5, size=elem, halo=2, dtype=float, split=(6,1,1))
#									 .modifier(volume6, size=elem, halo=0, dtype=float, split=(6,1,1))

#	volume7 = maximum(volume6,x,y,z).modifier(volume6, size=elem, halo=3, dtype=float, split=(6,1,1))
#									 .modifier(volume7, size=elem, halo=0, dtype=float, split=(6,1,1))


#	volume8 = bilateral(volume7,x,y,z).modifier(volume7, size=elem, halo=5, dtype=float, split=(6,1,1))
#									  .modifier(volume8, size=elem, halo=0, dtype=float, split=(6,1,1))

#	volume9 = threshold(volume8,x,y,z).modifier(volume8, size=elem, halo=2, dtype=float, split=(6,1,1))
#									  .modifier(volume9, size=elem, halo=0, dtype=float, split=(6,1,1))

#	volume10 = maximum(volume9,x,y,z).modifier(volume9, size=elem, halo=3, dtype=float, split=(6,1,1))
#									 .modifier(volume10, size=elem, halo=0, dtype=float, split=(6,1,1))


	save_image(volume4,'result.raw',out_of_core=True) 

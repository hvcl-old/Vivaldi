def dilation(volume, x, y, z):
	# Specify the radius here
	radius = 2            
	# cube_iter = make_cube_iter(x, y, z, radius)

	# # Calculate the average
	# sum = 0
	# total = 0
	# for point in cube_iter:
		# sum = sum + point_query_3d(volume, point)
		# total += 1

	# avg = sum/(total)

	# # Calculate the population
	# cube_iter = make_cube_iter(x,y,z, radius)
	# tmp = 0
	# std = 0
	# for point in cube_iter:
		# tmp = point_query_3d(volume, point) - avg
		# std += sqrt(tmp*tmp)

	# # Calculate the standard deviation
	# std /= avg
	# std = sqrt(std)
	
	# return std
	cube_iter = make_cube_iter(x, y, z, radius)
	
	center = make_float3(x,y,z) 
	max= point_query_3d(volume, center)
	for point in cube_iter:
		thispoint = point_query_3d(volume, point)
		if max < thispoint:
			max = thispoint
		
	return max
def main():                                                                         
	volume = load_data_3d(DATA_PATH+'/em_small_median.dat', 'uchar')
	print "ORIGINAL"
	print volume

	result = dilation(volume,x,y,z).range(x=0:512,y=0:512,z=0:512).dtype(volume, uchar)
	
	# Convert to uchar
	result2 = result.astype(numpy.uint8)
	
	# Write the result to file
	result2.tofile('result.raw')



import numpy
from scipy import misc

# function that takes long time
def heatflow(image, x, y):
	a = laplacian(image, x, y)
	ret = point_query_2d(image, x, y)

	dt =  0.0000025

#	for i in range(100000):
#	for i in range(100):
#		ret = ret + dt*a

	niter = 1000

	dt =  0.5 / niter

	for i in range(niter):
		ret = ret + dt*a

	return ret

def diff(a, b, x, y):
	
	ret = point_query_2d(a, x, y) - point_query_2d(b, x, y)

	niter = 1000

	dt =  0.5 / niter

	for i in range(niter):
		ret = ret + dt*ret

	return ret

def main():

	print "+++ Loading image ..."
	image1 = load_data_2d(DATA_PATH+'flower.jpg',float)
	image2 = load_data_2d(DATA_PATH+'flower.jpg',float)
#	image = load_data_2d(DATA_PATH+'/Tile_001.png', float)
#	image = misc.lena()
	print "+++ Loading Done!"

	# GPU test

	print "+++ Task Parallelism test +++"

# Task dependency graph
#
# image ---> a -------------+-> e
#        |                  |
#        +-> b --> c --> d -+ 
#

	a = heatflow(image1, x, y).range(image1).dtype(image1,float)

	b = heatflow(image2, x, y).range(image2).dtype(image2,float)

	c = heatflow(b, x, y).range(image2).dtype(b,float)

	d = heatflow(c, x, y).range(image2).dtype(c,float)

	e = diff(a, d, x, y).range(image1).dtype(a,float).dtype(d,float)

	synchronize()
	print "+++ Done! +++"
	print "   "

	print "+++ Save image +++"
	#save_image(e, "result-taskparallel.png")
	print "+++ Done! +++"

def render(volume, x, y):
	step = 5
	line_iter = orthogonal_iter(volume, x, y, step)
	
	color = make_float4(0)
	tmp_val = make_float4(0)
	tmp_val1 = make_float4(0)
	tmp_val2 = make_float4(0)
	val = make_float2(0)
	for elem in line_iter:
		val = linear_query_3d(volume, elem)
		tmp_val1 = transfer(val.x)
		tmp_val2 = transfer(val.y,1)

		tmp_val = ch_binder(tmp_val1, tmp_val2) 

		color = alpha_compositing(color, tmp_val)

	
		#if tmp_val.w != 0:
			#a = 0
			#a = DEVICE_NUMBER
			#b = 0
			#col = make_float4(0)
			#if a == 3: b = 20
			#if a == 2: b = 0
			#if a == 1: b = 30
			#if a == 0: b = 10
			#col = transfer(255-b,1)
			#if a == 1:
				#color = alpha_compositing(color, tmp_val)

		if color.w > 253: break

	color = background_white(color)
	return RGBA(color)

def halocondition(front, back, x, y):

	a = point_query_2d(front, x, y)
	b = point_query_2d(back, x, y)
	a = detach(a)
	b = detach(b)
	c = make_float4(0)
	c = alpha_compositing_wo_alpha(a, b)

	c = background_white(c)

	return RGBA(c)

def main():
	volume = load_data_3d(DATA_PATH+'/Zebra_in2GB.dat', out_of_core=True)
	
	enable_viewer(render(volume,x,y).range(x=-512:512,y=-512:512).dtype(volume, uchar).split(volume, x=2, y=2).merge(halocondition,'front-to-back').halo(volume, 0) ,'TFF2', '3D', 256)
	#enable_viewer(render(volume,x,y).range(x=-512:512,y=-512:512).dtype(volume, uchar),'TFF2', '3D', 256)


def render(volume, x, y):
	step = 2 
	line_iter = orthogonal_iter(volume, x, y, step)
	
	color = make_float4(0)
	tmp_val = make_float4(0)
	tmp_val1 = make_float4(0)
	tmp_val2 = make_float4(0)
	alpha = 0
	val = make_float2(0)
	flag = 0
	for elem in line_iter:
		val = linear_query_3d(volume, elem)
		tmp_val1 = transfer(val.x)
		tmp_val2 = transfer_ch2(val.y)

		tmp_val = ch_binder(tmp_val1, tmp_val2) 

		color = alpha_compositing_tmp(color, tmp_val)

		if color.w > 250: break

	color = alpha_compositing_tmp3(color, make_float4(255,255,255,255))

def halocondition(front, back, x, y):

	a = point_query_2d(front, x, y)
	b = point_query_2d(back, x, y)
	a = detach(a)
	b = detach(b)
	c = make_float4(0)
	c = alpha_compositing_tmp2(a, b)

	c = alpha_compositing_tmp3(c, make_float4(255,255,255,255))

	return RGBA(c)

def main():
	volume = load_data_3d(DATA_PATH+'/Composite.dat', out_of_core=True)
	

	enable_viewer(render(volume,x,y).range(x=-512:512,y=-512:512).dtype(volume, uchar).split(volume, z=4).merge(halocondition,'front-to-back').halo(volume,5) ,'TFF2', '3D', 256)


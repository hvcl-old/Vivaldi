def render(volume, x, y):
	step = 1
	line_iter = orthogonal_iter(volume, x, y, step)

	ret = make_float4(0)
	for elem in line_iter:
		val = linear_query_3d(volume, elem)

		col = make_float4(val)
		if col.w > 100:
			ret = alpha_compositing_tmp(ret, col);

		if ret.w > 253: 
			break

	return RGBA(ret)




def mergefunction(front ,back, x, y):
	a = point_query_2d(front, x, y)
	b = point_query_2d(back, x, y)
	c = make_float4(0)

	c = alpha_compositing_tmp2(a, b)
	
	return RGBA(c)


def main():                                                                         
	volume = load_data_3d(DATA_PATH+'/CThead_big.dat')

#	volume = heatflow(volume,x,y,z).halo(volume,1).range(volume,halo=1).dtype(volume,float).split(volume, z=2)
 
#	synchronize()

	LoadMatrix("ModelView")
	LoadIdentity()
	Rotate(90, 0, 0, 1)
	Translate(-128*5, -128*5, 0)
#	result = mip(volume,x,y).range(x=-540:540,y=-960:960).dtype(volume, uchar).split(volume,x=2).merge(sum, 'front-to-back')


	gpu_list = get_GPU_list(1)

	# initialize
	start  = time.time()
	result = render(volume,x,y).range(x=-960:960,y=-540:540).dtype(volume, uchar).split(result,y=1).execid(gpu_list)
	synchronize()
	end = time.time()
	elapsed = end - start
	print "INTITIALIZE TIME", elapsed

	# loop
	loop = 5
	start = time.time()
	for elem in range(loop):
		result = render(volume,x,y).range(x=-960:960,y=-540:540).dtype(volume, uchar).split(result,y=1).execid(gpu_list)
        a = SHADIE_GATHER(result)
		synchronize()

#	result1 = mip(volume,x,y).range(x=-960:960,y=-540:540).dtype(volume, uchar).split(result1, y=8).execid(gpu_list)
#	result2 = mip(volume,x,y).range(x=-960:960,y=-540:540).dtype(volume, uchar).split(result2, y=8).execid(gpu_list)
#	result3 = mip(volume,x,y).range(x=-960:960,y=-540:540).dtype(volume, uchar).split(result3, y=8).execid(gpu_list)
#	result4 = mip(volume,x,y).range(x=-960:960,y=-540:540).dtype(volume, uchar).split(result4, y=8).execid(gpu_list)
#	result5 = mip(volume,x,y).range(x=-960:960,y=-540:540).dtype(volume, uchar).split(result5, y=8).execid(gpu_list)

	end = time.time()
	elapsed = end - start
	print "ELASPED", elapsed, "loop", loop, "FPS", loop/elapsed
	
	#save_image(result,'orthogonal_1.png',normalize=True)

def render(volume, x, y):
	step = 3
	line_iter = orthogonal_iter(volume, x, y, step)
	
	color = make_float4(0)
	tmp_val = make_float4(0)
	for elem in line_iter:
		val = point_query_3d(volume, elem)
		tmp_val3 = make_float3(val)
				
		if val > 200:
			#if val < b.w:
			val = 0
			tmp_val = make_float4(tmp_val3, val)
		elif val < 150:
			val = 0
			tmp_val = make_float4(tmp_val3, val)
		else:
			if elem.x > 600 and elem.x <1290 and elem.y > 1400 and elem.y < 2020:
				tmp_val = transfer(val)
				tmp_val = make_float4(tmp_val.x, tmp_val.y, tmp_val.z, val/10.0)

			else:
				val = val /600.0
					
				tmp_val = make_float4(tmp_val3, val)

	
		#tmp_val = transfer(val)
			
		#tmp_val = make_float4(val, tmp_val3.w)

		color = alpha_compositing(color, tmp_val)

		if color.w > 253: break
	
	#color = background_white(color)

	return RGBA(color)


def halocondition(front, back, x, y):

	a = point_query_2d(front, x, y)
	b = point_query_2d(back, x, y)
	#if (b.w+b.x+b.y+b.z) == 0:
		#b = make_float4(0,255,0,50)
	#a = detach(a)
	#b = detach(b)
	c = make_float4(0)
	c = alpha_compositing_wo_alpha(a, b)

	#c = background_white(c)

	return RGBA(c)

def main():
	#volume = load_data_3d(DATA_PATH+'/CThead.dat')
	#volume = load_data_3d(DATA_PATH+'/CThead.dat', out_of_core=True)
	#volume = load_data_3d(DATA_PATH+'/combined.dat', out_of_core=True)
	#volume = load_data_3d(DATA_PATH+'/davids/combined.dat', out_of_core=True)
	volume = load_data_3d(DATA_PATH+'/david_20G.dat', out_of_core=True)
	#volume = load_data_3d(DATA_PATH+'/david_20G.dat')
	#volume = load_data_3d(DATA_PATH+'/test.dat',dtype="short", out_of_core=True)
	#volume = load_data_3d(DATA_PATH+'/whtest_.dat',dtype="short")

	#enable_viewer(render(volume,x,y).range(x=-512:512,y=-512:512).dtype(volume, short) ,'TFF', '3D', 3220)
	#enable_viewer(render(volume,x,y).range(x=-512:512,y=-512:512).dtype(volume, short).split(volume, x=8).merge(halocondition, 'front-to-back').halo(volume,0) ,'TFF', '3D', 3220)
	enable_viewer(render(volume,x,y).range(x=-512:512,y=-512:512).dtype(volume, uchar).split(volume, z=16).merge(halocondition,'front-to-back').halo(volume,0) ,'TFF', '3D', 255)
	#enable_viewer(render(volume,x,y).range(x=-512:512,y=-512:512).dtype(volume, uchar) ,'TFF', '3D', 255)
	#enable_viewer(render(volume,x,y).range(x=-512:512,y=-512:512).dtype(volume, uchar),'TFF', '3D', 256)

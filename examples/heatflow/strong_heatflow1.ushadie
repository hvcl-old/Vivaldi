import numpy                    # Numerical computing library 
# -----------------------------------------------------------------------------------
# Initialize the data, 
# do nothing but preallocate everything under the hood
def init(volume, x, y, z):
    return point_query_3d(volume, x, y, z)
# -----------------------------------------------------------------------------------
# Main Finite Difference Routines
def heatflow(volume, x, y, z):
	a = point_query_3d(volume, x+1, y+0, z+0)
    b = point_query_3d(volume, x-1, y+0, z+0)
    c = point_query_3d(volume, x+0, y+1, z+0)
    d = point_query_3d(volume, x+0, y-1, z+0)
    e = point_query_3d(volume, x+0, y+0, z+1)
    f = point_query_3d(volume, x+0, y+0, z-1)
    
	center =  point_query_3d(volume, x+0, y+0, z+0)
	
    dt =  0.25;
	result = center +  dt*(a+b+c+d+e+f - 6.0 * center)
	
    return result
#  -----------------------------------------------------------------------------------
def main():
    # --------------------------------------------------------------------------------
    # Create volume array
    dimx   = 512
    dimy   = 512
	# Weak test: 512 1024 2048 4096 7168
    dimz   = 896 #1024 #256
    volume = numpy.random.rand(dimx, dimy, dimz).astype(numpy.float32)
    
    print "Dimension    : ", dimx, dimy, dimz 
    print "Volume shape : ", volume.shape
    
    # --------------------------------------------------------------------------------
    # Number of GPUs for experiment
    #!!!
    gpu_list = get_GPU_list(1)     
    
    # Initialize the data allocation
    #!!!
    volume = init(volume,x,y,z).halo(volume,1).range(volume,halo=0).dtype(volume,float).execid(gpu_list).split(volume, z=1)
    volume = heatflow(volume,x,y,z).halo(volume,1).range(volume,halo=0).dtype(volume,float).execid(gpu_list).split(volume, z=1)        
	synchronize()
    
     # Time measure the heatflow kernel
    start = time.time()
    for n in range(0, 10):
        #!!!
        volume = heatflow(volume,x,y,z).halo(volume,1).range(volume,halo=0).dtype(volume,float).execid(gpu_list).split(volume, z=1)        
        synchronize()
    stop  = time.time()
    
    elapsed = stop - start
    print "Execution time (s): ", elapsed
# ----------------------------------------------------------------------------------- 
if __name__ == '__main__':  
    main() 

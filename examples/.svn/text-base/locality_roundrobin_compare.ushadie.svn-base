import numpy
from scipy import misc

# function that takes long time
def heatflow(image, x, y):
	a = laplacian(image, x, y)
	ret = point_query_2d(image, x, y)

	dt =  0.0000025

#	for i in range(100):
#	for i in range(100):
#		ret = ret + dt*a

#	niter = 1000
#	dt =  0.5 / niter
#	for i in range(niter):
#		ret = ret + dt*a

	return ret

def diff(a, b, x, y):
	
	ret = point_query_2d(a, x, y) - point_query_2d(b, x, y)

#	niter = 1000
#	dt =  0.5 / niter
#	for i in range(niter):
#		ret = ret + dt*ret

	return ret

def main():

	print "+++ Loading image ..."
#	image1 = load_data_2d(DATA_PATH+'flower.jpg',float)
#	image2 = load_data_2d(DATA_PATH+'flower.jpg',float)
#	image3 = load_data_2d(DATA_PATH+'flower.jpg',float)
#	image4 = load_data_2d(DATA_PATH+'flower.jpg',float)

	image1 = numpy.ones((64,1024,1024),dtype=numpy.float32)
	image2 = numpy.ones((64,1024,1024),dtype=numpy.float32)
	image3 = numpy.ones((64,1024,1024),dtype=numpy.float32)
	image4 = numpy.ones((64,1024,1024),dtype=numpy.float32)


#	image = load_data_2d(DATA_PATH+'/Tile_001.png', float)
#	image = misc.lena()
	print "+++ Loading Done!"

	# GPU test

	print "+++ Task Parallelism test +++"

	a = heatflow(image1, x, y).range(image1).dtype(image1,float)
	b = heatflow(image2, x, y).range(image2).dtype(image2,float)
	c = heatflow(image3, x, y).range(image3).dtype(image3,float)
	d = heatflow(image4, x, y).range(image4).dtype(image4,float)

	e = heatflow(image1, x, y).range(image1).dtype(image1,float)
	f = heatflow(image2, x, y).range(image2).dtype(image2,float)
	g = heatflow(image3, x, y).range(image3).dtype(image3,float)
	h = heatflow(image4, x, y).range(image4).dtype(image4,float)

	synchronize()
	ab = diff(a, b, x, y).range(image1).dtype(a,float).dtype(b,float)
	cd = diff(c, d, x, y).range(image1).dtype(c,float).dtype(d,float)
	ef = diff(e, f, x, y).range(image1).dtype(e,float).dtype(f,float)
	gh = diff(g, h, x, y).range(image1).dtype(g,float).dtype(h,float)

	a = None
	b = None
	c = None
	d = None
	synchronize()
	abcd = diff(ab, cd, x, y).range(image1).dtype(ab,float).dtype(cd,float)
	efgh = diff(ef, gh, x, y).range(image1).dtype(ef,float).dtype(gh,float)

	ab = None
	cd = None
	ef = None
	gh = None
	synchronize()
	abcdefgh = diff(abcd, efgh, x, y).range(image1).dtype(abcd,float).dtype(efgh,float)

	abcd = None
	efgh = None
	synchronize()
	print "+++ Done! +++"
	print "   "

	print "+++ Save image +++"
	#save_image(e, "result-taskparallel.png")
	print "+++ Done! +++"
